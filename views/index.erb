<!DOCTYPE html>
<html>
  <head>
    <title>Sinatra presenter</title>
    <meta name="viewport" content="width=device-width,
                                   initial-scale=1.0,
                                   maximum-scale=1.0,
                                   user-scalable=no,
                                   minimal-ui">
    <link rel="stylesheet" href="/js/appjs-v3/app.min.css" />
    <link rel="stylesheet" href="/css/sinatra-presenter.css" />
  </head>
  <body>
    <script src="/js/zeptojs/zepto.js"></script>
    <script src="/js/appjs-v3/app.min.js"></script>
    <script src="/js/jquery/jquery-2.1.1.js"></script>
    <div class="app-page" data-page="noconnection">
      <div class="app-topbar">
        <div class="app-title">Sinatra presenter</div>
      </div>
      <div class="app-content" id="noconn">
        <p class="noconn tcenter">
          <strong>No connection</strong><br/>
          Start the Sinatra presenter sever.<br/>
          <a href="#" class="app-button" id="instructions">Instructions</a>
        </p>
      </div>
    </div>

    <div class="app-page" data-page="instructions">
      <div class="app-topbar">
        <div class="app-button left" data-back>Back</div>
        <div class="app-title">Server instructions</div>
      </div>
      <div class="app-content">
        <p class="instructions">On your OS X, ensure you have <code>ruby</code>, <code>gem</code> and <code>git</code> installed.</p>
        <p class="instructions">Once <code>ruby -v</code> gives you some sensible result (not an error), install the server:</p>
        <p class="instructions code">
          <code>git clone https://github.com/gossiperl/sinatra-presenter.git</code><br/>
          <code>cd sinatra-presenter</code><br/>
          <code>gem install bundler</code><br/>
          <code>bundle install</code><br/>
        </p>
        <p class="instructions">Place your keynote files in the <code>preos</code> directory.</p>
        <p class="instructions">Start the server:</p>
        <p class="instructions code bottom"><code>ruby app.rb</code></p>
      </div>
    </div>

    <div class="app-page" data-page="list">
      <div class="app-topbar">
        <div class="app-title">Your presentations</div>
      </div>
      <div class="app-content">
        <ul class="app-list" id="presos">
        </ul>
      </div>
    </div>

    <div class="app-page" data-page="presentation">
      <div class="app-topbar">
        <div class="app-title" id="file"></div>
      </div>
      <div class="app-content">
        <h3 class="tcenter">slide <span id="currentSlide"></span> of <span id="totalSlide"></span></h3>
        <div class="slide_control">
          <img src="/images/prev.png" class="slide_button" id="btnPrev" />
          <img src="/images/next.png" class="slide_button" id="btnNext" />
        </div>
        <div id="stop">
          <div class="app-button" id="stopPreso">Stop presenting</div>
        </div>
      </div>
    </div>

    <script type="text/javascript">

      var OPACITY_INACTIVE = 0.2;
      var OPACITY_ACTIVE = 1;
      var OPACITY_TOUCH = 0.6;

      var wsInterval = null;
      var connected = false;
      var lastPreso = null;

      function hideLoader() {
        $(".loader").remove();
      }

      function showLoader() {
        hideLoader();
        $(document.body).append('<div class="loader"><div>&nbsp;</div></div>');
      }

      function displayPresos(ws, data) {
        if (data.length == 0) {
          $("#presos").empty();
          $("#presos").append("No presentations");
        } else {
          var restore = null;
          $("#presos").empty();
          data.forEach(function(item) {
            $("#presos").append("<li data-path='" + item["path"] + "' data-name='" + item["name"] + "' class='app-button preso'>" + item["name"] + "</li>" );
            if ( item["r"] == true ) {
              restore = { slide: parseInt(item["slide"]+""),
                          total: parseInt(item["total"]+""),
                          path: item["path"],
                          name: item["name"],
                          ws: ws };
            }
          });

          $(".preso").click(function() {
            showLoader();
            ws.send( JSON.stringify({command: "open", path: $(this).attr("data-path"), name: $(this).attr("data-name") }) );
          });

          if ( restore != null ) {
            App.load("presentation");
            setTimeout(function() {
              lastPreso = restore;
              applicationState(lastPreso);
            }, 500);
          }

        }
      };

      function applicationState(state) {
        $("#file").text(state.name);
        $("#currentSlide").text(state.slide);
        $("#totalSlide").text(state.total);
        $("#stopPreso").click(function() {
          if ( confirm("Are you sure?") ) {
            showLoader();
            state.ws.send( JSON.stringify({ command: "stop", document: state.path }) );
          }
        });

        $(".slide_button").on("touchstart", function() {
          $(this).css("opacity", OPACITY_TOUCH);
        });
        $(".slide_button").on("touchend", function() {
          presoControlsEffects();
        });

        $("#btnPrev").click(function() {
          if ( lastPreso.slide > 1 ) {
            showLoader();
            state.ws.send( JSON.stringify({ command: "prev", current: lastPreso.slide, document: state.path }) );
          }
        });


        $("#btnNext").click(function() {
          if ( lastPreso.slide < lastPreso.total ) {
            showLoader();
            state.ws.send( JSON.stringify({ command: "next", current: lastPreso.slide, document: state.path }) );
          }
        });

        presoControlsEffects();
      }

      function presoControlsEffects() {
        $("#btnPrev").css("opacity", ( lastPreso.slide == 1 ) ? OPACITY_INACTIVE : OPACITY_ACTIVE );
        $("#btnNext").css("opacity", ( lastPreso.slide == lastPreso.total ) ? OPACITY_INACTIVE : OPACITY_ACTIVE );
      }

      $(document).ready(function() {

        App.load("noconnection");

        $("#instructions").click(function() {
          App.load("instructions");
        });

        setInterval(function() {
          if (!connected) {
            var ws = new WebSocket('ws://' + window.location.host + window.location.pathname);
            ws.onopen = function()  {
              hideLoader();
              connected = true;
              if ( lastPreso == null ) {
                App.load("list");
              } else {
                App.load("presentation");
                lastPreso.ws = ws;
                applicationState(lastPreso);
              }
            };
            ws.onclose   = function()  {
              connected = false;
              App.load("noconnection");
              clearInterval(wsInterval);
            }
            ws.onmessage = function(m) {
              hideLoader();
              try {
                var p = JSON.parse( m.data );
                if ( p.response == "state" ) {
                  setTimeout(function() {
                    displayPresos( ws, p.presos )
                  }, 500);
                } else if ( p.response == "opened" ) {
                  App.load("presentation");
                  setTimeout(function() {
                    lastPreso = { slide: 1,
                                  total: p.slides,
                                  path: p.path,
                                  name: p.name,
                                  ws: ws };
                    applicationState(lastPreso);
                  }, 500);
                } else if ( p.response == "quit" ) {
                  lastPreso = null;
                  ws.close();
                } else if ( p.response == "changed" ) {
                  lastPreso.slide = parseInt(p.slide+"");
                  $("#currentSlide").text( lastPreso.slide );
                  presoControlsEffects();
                } else if ( p.response == "failed" ) {
                  alert("Command " + p.command + " failed with code " + p.code + ".\nReason: " + p.error);
                } else {
                  alert("Unsupported server response: " + p.response);
                }
              } catch (e) {
                console.error("Error while parsing incoming WS data.", m.data);
              }
            };
          }
        }, 1000);
      });

    </script>

  </body>
</html>